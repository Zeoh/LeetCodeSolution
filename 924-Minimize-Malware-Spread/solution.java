class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        // init dsu
        DSU dsu = new DSU(graph.length);
        for (int i = 0; i < graph.length; i++) {
            for (int j = i + 1; j < graph.length; j++) {
                if (graph[i][j] == 1) {
                    dsu.union(i, j);
                }
            }
        }
        int minInfected = Integer.MAX_VALUE, remove = -1;
        for (int r : initial) {
            int infected = infectedCount(graph, initial, new DSU(dsu), r);
            if (infected < minInfected || (infected == minInfected && r < remove)) {
                minInfected = infected;
                remove = r;
            }
        }
        return remove;
    }

    private int infectedCount(int[][] graph, int[] initial, DSU dsu, int remove) {
        for (int i : initial) {
            if (i == remove) {
                continue;
            }
            for (int neigh = 0; neigh < graph[i].length; neigh++) {
                if (i != neigh && graph[i][neigh] == 1) {
                    dsu.union(i, neigh);
                }
            }
        }
        Set<Integer> infected = new HashSet();
        for (int i : initial) {
            if (i == remove) {
                continue;
            }
            infected.add(dsu.find(i));
        }
        for (int i = 0; i < graph.length; i++) {
            if (infected.contains(dsu.find(i))) {
                infected.add(i);
            }
        }
        return infected.size();
    }

    class DSU {
        int[] parents, rank;

        DSU(int N) {
            this.parents = new int[N];
            this.rank = new int[N];
            for (int i = 0; i < N; i++) {
                parents[i] = i;
            }
        }

        DSU(DSU origin) {
            this.parents = origin.parents.clone();
            this.rank = origin.rank.clone();
        }

        void union(int x, int y) {
            int p_x = find(x);
            int p_y = find(y);
            if (p_x != p_y) {
                if (rank[p_x] > rank[p_y]) {
                    parents[p_y] = p_x;
                } else if (rank[p_x] < rank[p_y]) {
                    parents[p_x] = p_y;
                } else {
                    parents[p_y] = p_x;
                    rank[p_x]++;
                }
            }
        }

        int find(int x) {
            if (parents[x] != x) {
                parents[x] = find(parents[x]);
            }
            return parents[x];
        }
    }
}