class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if (initial == null || initial.length == 0) {
            return 0;
        }
        if (initial.length == 1) {
            return initial[0];
        }
        int minInfected = Integer.MAX_VALUE, res = 0;
        for (int n : initial) {
            int infect = spreadWithoutNode(graph, initial, n);
            if (infect < minInfected || (infect == minInfected && n < res)) {
                minInfected = infect;
                res = n;
            }
        }
        return res;
    }

    private int spreadWithoutNode(int[][] graph, int[] initial, int n) {
        int N = graph.length;
        DSU dsu = new DSU(N + 1);
        for (int i = 0; i < N; i++) {
            if (i == n) {
                continue;
            }
            for (int j = i + 1; j < N; j++) {
                if (j != n && graph[i][j] == 1) {
                    dsu.union(i, j);
                }
            }
        }
        for (int i : initial) {
            if (i != n) {
                dsu.union(N, i);
            }
        }
        int count = 0;
        for (int i = 0; i < N; i++) {
            if (dsu.find(i) == dsu.find(N)) {
                count++;
            }
        }
        return count;
    }

    class DSU {
        int[] parents, rank;

        DSU(int N) {
            this.parents = new int[N];
            this.rank = new int[N];
            for (int i = 0; i < N; i++) {
                parents[i] = i;
            }
        }

        void union(int x, int y) {
            int p_x = find(x);
            int p_y = find(y);
            if (p_x != p_y) {
                if (rank[p_x] > rank[p_y]) {
                    parents[p_y] = p_x;
                } else if (rank[p_x] < rank[p_y]) {
                    parents[p_x] = p_y;
                } else {
                    parents[p_y] = p_x;
                    rank[p_x]++;
                }
            }
        }

        int find(int x) {
            if (parents[x] != x) {
                parents[x] = find(parents[x]);
            }
            return parents[x];
        }
    }
}